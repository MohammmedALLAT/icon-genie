import { GoogleGenAI, Modality } from "@google/genai";
import { ImagePromptStructure } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const createPromptJson = (subject: string, customColors: string[]): ImagePromptStructure => {
  const defaultColors = ["green", "white", "black", "yellow", "red", "blue"];
  return {
    prompt: subject,
    style: "3D realistic, glossy, professional, icon design",
    lighting: "studio soft light, realistic reflections",
    color_palette: customColors.length > 0 ? customColors : defaultColors,
    background: "simple gradient or solid neutral tone",
    format: "high resolution, transparent background if possible"
  };
};

const generateWithImagen = async (prompt: string, customColors: string[]): Promise<string> => {
    const promptStructure = createPromptJson(prompt, customColors);
    const fullPrompt = JSON.stringify(promptStructure, null, 2);

    const response = await ai.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: `Generate an icon based on the following JSON description. Focus on the 'prompt' field as the main subject: ${fullPrompt}`,
        config: {
          numberOfImages: 1,
          outputMimeType: 'image/png',
          aspectRatio: '1:1',
        },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      return `data:image/png;base64,${response.generatedImages[0].image.imageBytes}`;
    } else {
      throw new Error("No image was generated by the API.");
    }
}

const editWithGeminiFlashImage = async (prompt: string, customColors: string[], images: Array<{ data: string, mimeType: string }>): Promise<string> => {
    const promptStructure = createPromptJson(prompt, customColors);
    let textPrompt: string;

    if (images.length > 1) {
        textPrompt = `You have been given a reference image and a logo. Combine them creatively and apply modifications based on the following instructions. If a color palette is specified, use it. JSON instructions: ${JSON.stringify(promptStructure, null, 2)}`;
    } else {
        textPrompt = `Based on the provided image and the following JSON structure, generate a new icon. Focus on the 'prompt' field for the main subject modification and use the 'color_palette' if specified. JSON: ${JSON.stringify(promptStructure, null, 2)}`;
    }
    
    const imageParts = images.map(image => ({
        inlineData: {
            data: image.data,
            mimeType: image.mimeType,
        },
    }));
    
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          ...imageParts,
          {
            text: textPrompt,
          },
        ],
      },
      config: {
          responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        return `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`;
      }
    }
    
    throw new Error("No image was generated by the API.");
}


export const generateOrEditIcon = async (
    subject: string, 
    colors: string,
    imageData?: { data: string, mimeType: string },
    logoData?: { data: string, mimeType: string }
): Promise<string> => {
  try {
    const colorList = colors.split(',').map(c => c.trim()).filter(c => c);
    
    if (imageData || logoData) {
        const imagesToEdit = [];
        if (imageData) imagesToEdit.push(imageData);
        if (logoData) imagesToEdit.push(logoData);
        
        return await editWithGeminiFlashImage(subject, colorList, imagesToEdit);
    } else {
        return await generateWithImagen(subject, colorList);
    }
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    throw new Error("Failed to generate image. Please check your API key and try again.");
  }
};